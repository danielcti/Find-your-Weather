{"version":3,"sources":["components/Card.js","components/CardList.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","data","weatherInfo","date","min","max","react_default","a","createElement","className","style","width","background","src","pic","alt","height","margin","color","CardList","tags","components_Card","pics","cards","length","Form","onSubmit","handleSubmit","type","name","onChange","handleChange","value","cityKey","APIKey","cityUrlStart","picUrlStart","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setCityKey","request","require","Key","state","cityUrl","concat","city","error","response","body","dados","JSON","parse","_unused","alert","setTimeout","setState","getWeather","console","log","urlEnd","phrases","DailyForecasts","forEach","element","JSONDate","Date","i","search","substring","Temperature","Minimum","Value","Maximum","push","Day","IconPhrase","_unused2","getUrl","toLowerCase","includes","bind","assertThisInitialized","event","target","preventDefault","components_Form","citykey","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eaf8941.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    let data = props.weatherInfo;\n    let date = '';\n    let min = '';\n    let max = '';\n    if(typeof data === 'object' ){ // porque antes disso nao vai dar pra pegar o dado de undefined\n        date = data.date;\n        min = data.min;\n        max = data.max;\n    }\n    return(\n            <div className=\"card\" style={{width: '18rem', background:'linear-gradient(to right, rgb(55, 198, 223), rgb(61, 65, 239))'}}>\n                <img src={props.pic} className=\"card-img-top\" alt=\".\" style={{height:'120px', width:'120px',margin: '20px 0px 0px 75px'}}/>\n                <div className=\"card-body\" style={{color: 'white'}}>\n                    <h5 className=\"card-title\">{date}</h5>\n                    <p className=\"card-text\">Max: {max}ºC, Min: {min}ºC</p>\n                </div>\n            </div>            \n    )\n\n}\n\nexport default Card;","import Card from './Card';\nimport React from 'react';\n\nconst CardList = (props) => {\n    // console.log(props)\n    let tags = (\n    <div className='card-group'>\n        <Card weatherInfo={props.weatherInfo[0]} pic = {props.pics[0]}/>\n        <Card weatherInfo={props.weatherInfo[1]}  pic = {props.pics[1]}/>\n        <Card weatherInfo={props.weatherInfo[2]}  pic = {props.pics[2]}/>\n        <Card weatherInfo={props.weatherInfo[3]}  pic = {props.pics[3]}/>\n        <Card weatherInfo={props.weatherInfo[4]}  pic = {props.pics[4]}/>\n    </div>\n)\n    let cards = ''\n    if(props.weatherInfo.length > 0) // para inicialmente nao mostra os cards\n        cards = tags;\n    return(\n        <div>\n            {cards}\n        </div>\n    )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Form = (props) => {\n    return(\n            <div >\n                <form onSubmit={props.handleSubmit}>\n                <label>\n                    City name:\n                    <input type=\"search\" name=\"name\" onChange={props.handleChange}/>\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h1>{props.cityKey}</h1>\n            </div>            \n    )\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/CardList';\nimport Form from './components/Form'\nconst APIKey = 'UA5VVpQ6HNr1w5Cs1lkbzir95p6UBWoM';\nconst cityUrlStart = 'http://dataservice.accuweather.com/locations/v1/cities/search?apikey=';\nconst picUrlStart = 'http://openweathermap.org/img/w/';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      pics: [],\n      city: '',\n      cityUrl: `${cityUrlStart}${APIKey}&q=`,\n      cityKey: '',\n      weatherInfo: [],\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this); \n  }\n \n  handleChange(event) {\n    this.setState({city: event.target.value});\n  }\n\n  handleSubmit(event) {\n    // this.setState({cityUrl: this.state.cityUrl.concat(this.state.city)})\n    event.preventDefault(); // n refresh a pagina\n    // console.log(this.state.city)\n    this.setCityKey();\n  }\n\n  setCityKey = () => {\n    var request = require('request');\n    var Key = '';\n    request(this.state.cityUrl.concat(this.state.city), function (error, response, body) {\n      try{\n        const dados = JSON.parse(body)\n        Key = dados[0].Key\n        // console.log(Key)   \n      }\n      catch{\n        alert('Não foi possível encontrar essa cidade. Digite novamente.')\n      }\n    });\n    setTimeout(() => { // problemas com async\n    this.setState({cityKey: Key})\n    this.getWeather()\n    },50)\n  }\n\n  getWeather = () => {\n    console.log(this.state.city, this.state.cityKey)\n    const urlStart = 'http://dataservice.accuweather.com/forecasts/v1/daily/5day/';\n    const urlEnd =  `?apikey=${APIKey}&metric=true`;\n    var request = require('request');\n    let weatherInfo = []\n    let phrases = []\n    request(urlStart + this.state.cityKey + urlEnd, function(error, response, body){\n      try{\n        var obj = JSON.parse(body);\n        let data = obj.DailyForecasts;\n        // console.log(data)\n        data.forEach(element => {\n          const JSONDate = element.Date;\n          const i =  JSONDate.search('T'); // a data se encontra ate achar o T\n          const date = JSONDate.substring(0,i)\n          const min = element.Temperature.Minimum.Value\n          const max = element.Temperature.Maximum.Value\n          phrases.push(element.Day.IconPhrase)\n          weatherInfo.push({min: min, max: max, date: date})\n        });\n      }\n      catch{\n        alert('Não foi possível encontrar as informações dessa cidade. Atualize a pagina e tente novamente!')\n      }\n    });\n    setTimeout(() => this.getUrl(phrases), 50) // problemas com assync\n    setTimeout(() => this.setState({weatherInfo: weatherInfo}), 50)// problemas com assync\n    setTimeout(() => console.log(this.state.weatherInfo),50)\n  }\n\n  getUrl = (phrases) => {\n    let pics = []\n    phrases.forEach(element => {\n      element = element.toLowerCase()\n      if(element.includes('cloud')){\n        pics.push(picUrlStart+'03d.png')\n      }else if(element.includes('sunny')){\n        pics.push(picUrlStart+'01d.png')\n      }else if(element.includes('rain')){\n        pics.push(picUrlStart+'09d.png')\n      }else if(element.includes('snow')){\n        pics.push(picUrlStart+'13d.png')\n      }else if(element.includes('thunder')){\n        pics.push(picUrlStart+'11d.png')\n      }else{\n        pics.push('')\n      }\n    });\n    console.log(phrases)\n    this.setState({pics: pics})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Form handleChange={this.handleChange} handleSubmit={this.handleSubmit} citykey={this.state.cityKey}/>\n      <CardList {...this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}